<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Data.Common;

#nullable enable

namespace LinqToDB
{
	using DataProvider.Access;
	using DataProvider.Oracle;
	using DataProvider.SqlServer;
	using Infrastructure;
	using Infrastructure.Internal;

	public static partial class OptionsExtensions
	{
<#
	foreach (var item in new []
	{
		new { Key = "Access",    Name = "Access",               Remarks = "" },
		new { Key = "Oracle",    Name = "Oracle",               Remarks = @"
		/// <remarks>
		/// <para>
		/// By default LinqToDB tries to load managed version of Oracle provider.
		/// </para>
		/// <para>
		/// Oracle dialect will be chosen automatically:
		/// <list type=""bullet"">
		/// <item>if <see cref=""OracleTools.AutoDetectProvider""/> (default: <c>true</c>) enabled, LinqToDB will query server for version</item>
		/// <item>otherwise <see cref=""OracleTools.DefaultVersion""/> (default: <see cref=""OracleVersion.v12""/>) will be used as default dialect.</item>
		/// </list>
		/// </para>
		/// </remarks>" },
		new { Key = "SqlServer", Name = "Microsoft SQL Server", Remarks = @"
		/// <remarks>
		/// <para>
		/// Default provider configured using <see cref=""SqlServerTools.Provider""/> option and set to <see cref=""SqlServerProvider.SystemDataSqlClient""/> by default.
		/// </para>
		/// <para>
		/// SQL Server dialect will be chosen automatically:
		/// <list type=""bullet"">
		/// <item>if <see cref=""SqlServerTools.AutoDetectProvider""/> (default: <c>true</c>) enabled, LinqToDB will query server for version</item>
		/// <item>otherwise <see cref=""SqlServerVersion.v2008""/> will be used as default dialect.</item>
		/// </list>
		/// </para>
		/// For more fine-grained configuration see <see cref=""UseSqlServer(DataContextOptionsBuilder, string, SqlServerProvider, SqlServerVersion)""/> overload.
		/// </remarks>" },
	})
	{
#>
		#region <#= item.Key #>

		/// <summary>
		/// Configure connection to use <#= item.Name #> default provider, dialect and connection string.
		/// </summary>
		/// <param name="optionsBuilder">Instance of <see cref="DataContextOptionsBuilder"/>.</param>
		/// <param name="connectionString"><#= item.Name #> connection string.</param>
		/// <returns>The builder instance so calls can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder Use<#= item.Key #>(this DataContextOptionsBuilder optionsBuilder, string connectionString)
		{
			if (optionsBuilder   == null) throw new ArgumentNullException(nameof(optionsBuilder));
			if (connectionString == null) throw new ArgumentNullException(nameof(connectionString));

			optionsBuilder = optionsBuilder
				.UseConnectionString(connectionString)
				.UseProvider        (null)
				.UseDataProvider    (null);

			var extension = optionsBuilder.Options.FindExtension<<#= item.Key #>OptionsExtension>() ?? new <#= item.Key #>OptionsExtension();

			((IDataContextOptionsBuilderInfrastructure)optionsBuilder).AddOrUpdateExtension(extension);

			return optionsBuilder;
		}

		/// <summary>
		/// Configure connection to use <#= item.Name #> default provider, dialect and connection string.
		/// </summary>
		/// <param name="optionsBuilder">Instance of <see cref="DataContextOptionsBuilder"/>.</param>
		/// <param name="connectionString"><#= item.Name #> connection string.</param>
		/// <param name="optionsAction">An optional action to allow additional <#= item.Name #> specific configuration.</param>
		/// <returns>The builder instance so calls can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder Use<#= item.Key #>(
			this DataContextOptionsBuilder          optionsBuilder,
			string                                  connectionString,
			Action<<#= item.Key #>DataContextOptionsBuilder> optionsAction)
		{
			var ob = Use<#= item.Key #>(optionsBuilder, connectionString);

			optionsAction(new (ob));

			return ob;
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <param name="optionsBuilder"> The builder being used to configure the context. </param>
		/// <param name="connection">An existing <see cref="DbConnection" /> to be used to connect to the database.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder Use<#= item.Key #>(this DataContextOptionsBuilder optionsBuilder, DbConnection connection)
		{
			if (optionsBuilder == null) throw new ArgumentNullException(nameof(optionsBuilder));
			if (connection     == null) throw new ArgumentNullException(nameof(connection));

			optionsBuilder = optionsBuilder
				.UseProvider    (null)
				.UseDataProvider(null)
				.UseConnection  (connection);

			var extension = GetOrCreateExtension(optionsBuilder);

			((IDataContextOptionsBuilderInfrastructure)optionsBuilder).AddOrUpdateExtension(extension);

			ConfigureWarnings(optionsBuilder);

			return optionsBuilder;
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <param name="optionsBuilder"> The builder being used to configure the context. </param>
		/// <param name="connection">An existing <see cref="DbConnection" /> to be used to connect to the database.</param>
		/// <param name="optionsAction">An optional action to allow additional SQL Server specific configuration.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder Use<#= item.Key #>(
			this DataContextOptionsBuilder          optionsBuilder,
			DbConnection                            connection,
			Action<<#= item.Key #>DataContextOptionsBuilder> optionsAction)
		{
			var ob = Use<#= item.Key #>(optionsBuilder, connection);

			optionsAction?.Invoke(new (ob));

			return ob;
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <typeparam name="TContext">The type of context to be configured.</typeparam>
		/// <param name="optionsBuilder">The builder being used to configure the context.</param>
		/// <param name="connectionString">The connection string of the database to connect to.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder<TContext> Use<#= item.Key #><TContext>(
			this DataContextOptionsBuilder<TContext> optionsBuilder,
			string                                   connectionString)
			where TContext : IDataContext
		{
			return (DataContextOptionsBuilder<TContext>)Use<#= item.Key #>((DataContextOptionsBuilder)optionsBuilder, connectionString);
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <typeparam name="TContext">The type of context to be configured.</typeparam>
		/// <param name="optionsBuilder">The builder being used to configure the context.</param>
		/// <param name="connectionString">The connection string of the database to connect to.</param>
		/// <param name="optionsAction">An optional action to allow additional <#= item.Name #> specific configuration.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder<TContext> Use<#= item.Key #><TContext>(
			this DataContextOptionsBuilder<TContext> optionsBuilder,
			string                                   connectionString,
			Action<<#= item.Key #>DataContextOptionsBuilder>  optionsAction)
			where TContext : IDataContext
		{
			return (DataContextOptionsBuilder<TContext>)Use<#= item.Key #>((DataContextOptionsBuilder)optionsBuilder, connectionString, optionsAction);
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <typeparam name="TContext">The type of context to be configured.</typeparam>
		/// <param name="optionsBuilder">The builder being used to configure the context.</param>
		/// <param name="connection">An existing <see cref="DbConnection" /> to be used to connect to the database.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder<TContext> Use<#= item.Key #><TContext>(
			this DataContextOptionsBuilder<TContext> optionsBuilder,
			DbConnection                             connection)
			where TContext : IDataContext
		{
			return (DataContextOptionsBuilder<TContext>)Use<#= item.Key #>((DataContextOptionsBuilder)optionsBuilder, connection);
		}

		/// <summary>
		/// Configures the context to connect to a <#= item.Name #> database.
		/// </summary>
		/// <typeparam name="TContext">The type of context to be configured.</typeparam>
		/// <param name="optionsBuilder">The builder being used to configure the context.</param>
		/// <param name="connection">An existing <see cref="DbConnection" /> to be used to connect to the database.</param>
		/// <param name="optionsAction">An optional action to allow additional <#= item.Name #> specific configuration.</param>
		/// <returns>The options builder so that further configuration can be chained.</returns><#= item.Remarks #>
		public static DataContextOptionsBuilder<TContext> Use<#= item.Key #><TContext>(
			this DataContextOptionsBuilder<TContext> optionsBuilder,
			DbConnection                             connection,
			Action<<#= item.Key #>DataContextOptionsBuilder>  optionsAction)
			where TContext : IDataContext
		{
			return (DataContextOptionsBuilder<TContext>)Use<#= item.Key #>((DataContextOptionsBuilder)optionsBuilder, connection, optionsAction);
		}

		#endregion

<#
	}
#>
	}
}
